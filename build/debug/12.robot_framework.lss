
build/debug/12.robot_framework.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d9c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08000f24  08000f24  00010f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f38  08000f38  00010f38  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  08000f38  08000f38  00010f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000f40  08000f40  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f40  08000f40  00010f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f44  08000f44  00010f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08000f48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000020  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000090  20000090  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      0000004d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00003ea5  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000ea6  00000000  00000000  00023f92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000003e8  00000000  00000000  00024e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000003c8  00000000  00000000  00025220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000257b  00000000  00000000  000255e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00001705  00000000  00000000  00027b63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000008a4  00000000  00000000  00029268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000132e  00000000  00000000  00029b0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000f0c 	.word	0x08000f0c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08000f0c 	.word	0x08000f0c

080001c8 <_stack_init>:
 80001c8:	f5a3 3a80 	sub.w	sl, r3, #65536	; 0x10000
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop

080001d0 <_mainCRTStartup>:
 80001d0:	4b17      	ldr	r3, [pc, #92]	; (8000230 <_mainCRTStartup+0x60>)
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	bf08      	it	eq
 80001d6:	4b13      	ldreq	r3, [pc, #76]	; (8000224 <_mainCRTStartup+0x54>)
 80001d8:	469d      	mov	sp, r3
 80001da:	f7ff fff5 	bl	80001c8 <_stack_init>
 80001de:	2100      	movs	r1, #0
 80001e0:	468b      	mov	fp, r1
 80001e2:	460f      	mov	r7, r1
 80001e4:	4813      	ldr	r0, [pc, #76]	; (8000234 <_mainCRTStartup+0x64>)
 80001e6:	4a14      	ldr	r2, [pc, #80]	; (8000238 <_mainCRTStartup+0x68>)
 80001e8:	1a12      	subs	r2, r2, r0
 80001ea:	f000 fe87 	bl	8000efc <memset>
 80001ee:	4b0e      	ldr	r3, [pc, #56]	; (8000228 <_mainCRTStartup+0x58>)
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d000      	beq.n	80001f6 <_mainCRTStartup+0x26>
 80001f4:	4798      	blx	r3
 80001f6:	4b0d      	ldr	r3, [pc, #52]	; (800022c <_mainCRTStartup+0x5c>)
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d000      	beq.n	80001fe <_mainCRTStartup+0x2e>
 80001fc:	4798      	blx	r3
 80001fe:	2000      	movs	r0, #0
 8000200:	2100      	movs	r1, #0
 8000202:	0004      	movs	r4, r0
 8000204:	000d      	movs	r5, r1
 8000206:	480d      	ldr	r0, [pc, #52]	; (800023c <_mainCRTStartup+0x6c>)
 8000208:	2800      	cmp	r0, #0
 800020a:	d002      	beq.n	8000212 <_mainCRTStartup+0x42>
 800020c:	480c      	ldr	r0, [pc, #48]	; (8000240 <_mainCRTStartup+0x70>)
 800020e:	f3af 8000 	nop.w
 8000212:	f000 fe4f 	bl	8000eb4 <__libc_init_array>
 8000216:	0020      	movs	r0, r4
 8000218:	0029      	movs	r1, r5
 800021a:	f000 fa11 	bl	8000640 <main>
 800021e:	f000 fe35 	bl	8000e8c <exit>
 8000222:	bf00      	nop
 8000224:	00080000 	.word	0x00080000
	...
 8000234:	20000070 	.word	0x20000070
 8000238:	20000090 	.word	0x20000090
	...

08000244 <__aeabi_uldivmod>:
 8000244:	b953      	cbnz	r3, 800025c <__aeabi_uldivmod+0x18>
 8000246:	b94a      	cbnz	r2, 800025c <__aeabi_uldivmod+0x18>
 8000248:	2900      	cmp	r1, #0
 800024a:	bf08      	it	eq
 800024c:	2800      	cmpeq	r0, #0
 800024e:	bf1c      	itt	ne
 8000250:	f04f 31ff 	movne.w	r1, #4294967295
 8000254:	f04f 30ff 	movne.w	r0, #4294967295
 8000258:	f000 b974 	b.w	8000544 <__aeabi_idiv0>
 800025c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000260:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000264:	f000 f806 	bl	8000274 <__udivmoddi4>
 8000268:	f8dd e004 	ldr.w	lr, [sp, #4]
 800026c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000270:	b004      	add	sp, #16
 8000272:	4770      	bx	lr

08000274 <__udivmoddi4>:
 8000274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000278:	9d08      	ldr	r5, [sp, #32]
 800027a:	4604      	mov	r4, r0
 800027c:	468e      	mov	lr, r1
 800027e:	2b00      	cmp	r3, #0
 8000280:	d14d      	bne.n	800031e <__udivmoddi4+0xaa>
 8000282:	428a      	cmp	r2, r1
 8000284:	4694      	mov	ip, r2
 8000286:	d969      	bls.n	800035c <__udivmoddi4+0xe8>
 8000288:	fab2 f282 	clz	r2, r2
 800028c:	b152      	cbz	r2, 80002a4 <__udivmoddi4+0x30>
 800028e:	fa01 f302 	lsl.w	r3, r1, r2
 8000292:	f1c2 0120 	rsb	r1, r2, #32
 8000296:	fa20 f101 	lsr.w	r1, r0, r1
 800029a:	fa0c fc02 	lsl.w	ip, ip, r2
 800029e:	ea41 0e03 	orr.w	lr, r1, r3
 80002a2:	4094      	lsls	r4, r2
 80002a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a8:	0c21      	lsrs	r1, r4, #16
 80002aa:	fbbe f6f8 	udiv	r6, lr, r8
 80002ae:	fa1f f78c 	uxth.w	r7, ip
 80002b2:	fb08 e316 	mls	r3, r8, r6, lr
 80002b6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002ba:	fb06 f107 	mul.w	r1, r6, r7
 80002be:	4299      	cmp	r1, r3
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x64>
 80002c2:	eb1c 0303 	adds.w	r3, ip, r3
 80002c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ca:	f080 811f 	bcs.w	800050c <__udivmoddi4+0x298>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 811c 	bls.w	800050c <__udivmoddi4+0x298>
 80002d4:	3e02      	subs	r6, #2
 80002d6:	4463      	add	r3, ip
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e0:	fb08 3310 	mls	r3, r8, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 f707 	mul.w	r7, r0, r7
 80002ec:	42a7      	cmp	r7, r4
 80002ee:	d90a      	bls.n	8000306 <__udivmoddi4+0x92>
 80002f0:	eb1c 0404 	adds.w	r4, ip, r4
 80002f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f8:	f080 810a 	bcs.w	8000510 <__udivmoddi4+0x29c>
 80002fc:	42a7      	cmp	r7, r4
 80002fe:	f240 8107 	bls.w	8000510 <__udivmoddi4+0x29c>
 8000302:	4464      	add	r4, ip
 8000304:	3802      	subs	r0, #2
 8000306:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030a:	1be4      	subs	r4, r4, r7
 800030c:	2600      	movs	r6, #0
 800030e:	b11d      	cbz	r5, 8000318 <__udivmoddi4+0xa4>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c5 4300 	strd	r4, r3, [r5]
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0xc2>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80ef 	beq.w	8000506 <__udivmoddi4+0x292>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x160>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0xd4>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80f9 	bhi.w	800053a <__udivmoddi4+0x2c6>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0303 	sbc.w	r3, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	469e      	mov	lr, r3
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0e0      	beq.n	8000318 <__udivmoddi4+0xa4>
 8000356:	e9c5 4e00 	strd	r4, lr, [r5]
 800035a:	e7dd      	b.n	8000318 <__udivmoddi4+0xa4>
 800035c:	b902      	cbnz	r2, 8000360 <__udivmoddi4+0xec>
 800035e:	deff      	udf	#255	; 0xff
 8000360:	fab2 f282 	clz	r2, r2
 8000364:	2a00      	cmp	r2, #0
 8000366:	f040 8092 	bne.w	800048e <__udivmoddi4+0x21a>
 800036a:	eba1 010c 	sub.w	r1, r1, ip
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	2601      	movs	r6, #1
 8000378:	0c20      	lsrs	r0, r4, #16
 800037a:	fbb1 f3f7 	udiv	r3, r1, r7
 800037e:	fb07 1113 	mls	r1, r7, r3, r1
 8000382:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000386:	fb0e f003 	mul.w	r0, lr, r3
 800038a:	4288      	cmp	r0, r1
 800038c:	d908      	bls.n	80003a0 <__udivmoddi4+0x12c>
 800038e:	eb1c 0101 	adds.w	r1, ip, r1
 8000392:	f103 38ff 	add.w	r8, r3, #4294967295
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x12a>
 8000398:	4288      	cmp	r0, r1
 800039a:	f200 80cb 	bhi.w	8000534 <__udivmoddi4+0x2c0>
 800039e:	4643      	mov	r3, r8
 80003a0:	1a09      	subs	r1, r1, r0
 80003a2:	b2a4      	uxth	r4, r4
 80003a4:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a8:	fb07 1110 	mls	r1, r7, r0, r1
 80003ac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003b0:	fb0e fe00 	mul.w	lr, lr, r0
 80003b4:	45a6      	cmp	lr, r4
 80003b6:	d908      	bls.n	80003ca <__udivmoddi4+0x156>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c0:	d202      	bcs.n	80003c8 <__udivmoddi4+0x154>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f200 80bb 	bhi.w	800053e <__udivmoddi4+0x2ca>
 80003c8:	4608      	mov	r0, r1
 80003ca:	eba4 040e 	sub.w	r4, r4, lr
 80003ce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d2:	e79c      	b.n	800030e <__udivmoddi4+0x9a>
 80003d4:	f1c6 0720 	rsb	r7, r6, #32
 80003d8:	40b3      	lsls	r3, r6
 80003da:	fa22 fc07 	lsr.w	ip, r2, r7
 80003de:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e2:	fa20 f407 	lsr.w	r4, r0, r7
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	431c      	orrs	r4, r3
 80003ec:	40f9      	lsrs	r1, r7
 80003ee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f2:	fa00 f306 	lsl.w	r3, r0, r6
 80003f6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fa:	0c20      	lsrs	r0, r4, #16
 80003fc:	fa1f fe8c 	uxth.w	lr, ip
 8000400:	fb09 1118 	mls	r1, r9, r8, r1
 8000404:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000408:	fb08 f00e 	mul.w	r0, r8, lr
 800040c:	4288      	cmp	r0, r1
 800040e:	fa02 f206 	lsl.w	r2, r2, r6
 8000412:	d90b      	bls.n	800042c <__udivmoddi4+0x1b8>
 8000414:	eb1c 0101 	adds.w	r1, ip, r1
 8000418:	f108 3aff 	add.w	sl, r8, #4294967295
 800041c:	f080 8088 	bcs.w	8000530 <__udivmoddi4+0x2bc>
 8000420:	4288      	cmp	r0, r1
 8000422:	f240 8085 	bls.w	8000530 <__udivmoddi4+0x2bc>
 8000426:	f1a8 0802 	sub.w	r8, r8, #2
 800042a:	4461      	add	r1, ip
 800042c:	1a09      	subs	r1, r1, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb1 f0f9 	udiv	r0, r1, r9
 8000434:	fb09 1110 	mls	r1, r9, r0, r1
 8000438:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800043c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000440:	458e      	cmp	lr, r1
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x1e2>
 8000444:	eb1c 0101 	adds.w	r1, ip, r1
 8000448:	f100 34ff 	add.w	r4, r0, #4294967295
 800044c:	d26c      	bcs.n	8000528 <__udivmoddi4+0x2b4>
 800044e:	458e      	cmp	lr, r1
 8000450:	d96a      	bls.n	8000528 <__udivmoddi4+0x2b4>
 8000452:	3802      	subs	r0, #2
 8000454:	4461      	add	r1, ip
 8000456:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800045a:	fba0 9402 	umull	r9, r4, r0, r2
 800045e:	eba1 010e 	sub.w	r1, r1, lr
 8000462:	42a1      	cmp	r1, r4
 8000464:	46c8      	mov	r8, r9
 8000466:	46a6      	mov	lr, r4
 8000468:	d356      	bcc.n	8000518 <__udivmoddi4+0x2a4>
 800046a:	d053      	beq.n	8000514 <__udivmoddi4+0x2a0>
 800046c:	b15d      	cbz	r5, 8000486 <__udivmoddi4+0x212>
 800046e:	ebb3 0208 	subs.w	r2, r3, r8
 8000472:	eb61 010e 	sbc.w	r1, r1, lr
 8000476:	fa01 f707 	lsl.w	r7, r1, r7
 800047a:	fa22 f306 	lsr.w	r3, r2, r6
 800047e:	40f1      	lsrs	r1, r6
 8000480:	431f      	orrs	r7, r3
 8000482:	e9c5 7100 	strd	r7, r1, [r5]
 8000486:	2600      	movs	r6, #0
 8000488:	4631      	mov	r1, r6
 800048a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048e:	f1c2 0320 	rsb	r3, r2, #32
 8000492:	40d8      	lsrs	r0, r3
 8000494:	fa0c fc02 	lsl.w	ip, ip, r2
 8000498:	fa21 f303 	lsr.w	r3, r1, r3
 800049c:	4091      	lsls	r1, r2
 800049e:	4301      	orrs	r1, r0
 80004a0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a4:	fa1f fe8c 	uxth.w	lr, ip
 80004a8:	fbb3 f0f7 	udiv	r0, r3, r7
 80004ac:	fb07 3610 	mls	r6, r7, r0, r3
 80004b0:	0c0b      	lsrs	r3, r1, #16
 80004b2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b6:	fb00 f60e 	mul.w	r6, r0, lr
 80004ba:	429e      	cmp	r6, r3
 80004bc:	fa04 f402 	lsl.w	r4, r4, r2
 80004c0:	d908      	bls.n	80004d4 <__udivmoddi4+0x260>
 80004c2:	eb1c 0303 	adds.w	r3, ip, r3
 80004c6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ca:	d22f      	bcs.n	800052c <__udivmoddi4+0x2b8>
 80004cc:	429e      	cmp	r6, r3
 80004ce:	d92d      	bls.n	800052c <__udivmoddi4+0x2b8>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	1b9b      	subs	r3, r3, r6
 80004d6:	b289      	uxth	r1, r1
 80004d8:	fbb3 f6f7 	udiv	r6, r3, r7
 80004dc:	fb07 3316 	mls	r3, r7, r6, r3
 80004e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e4:	fb06 f30e 	mul.w	r3, r6, lr
 80004e8:	428b      	cmp	r3, r1
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x28a>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f4:	d216      	bcs.n	8000524 <__udivmoddi4+0x2b0>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d914      	bls.n	8000524 <__udivmoddi4+0x2b0>
 80004fa:	3e02      	subs	r6, #2
 80004fc:	4461      	add	r1, ip
 80004fe:	1ac9      	subs	r1, r1, r3
 8000500:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000504:	e738      	b.n	8000378 <__udivmoddi4+0x104>
 8000506:	462e      	mov	r6, r5
 8000508:	4628      	mov	r0, r5
 800050a:	e705      	b.n	8000318 <__udivmoddi4+0xa4>
 800050c:	4606      	mov	r6, r0
 800050e:	e6e3      	b.n	80002d8 <__udivmoddi4+0x64>
 8000510:	4618      	mov	r0, r3
 8000512:	e6f8      	b.n	8000306 <__udivmoddi4+0x92>
 8000514:	454b      	cmp	r3, r9
 8000516:	d2a9      	bcs.n	800046c <__udivmoddi4+0x1f8>
 8000518:	ebb9 0802 	subs.w	r8, r9, r2
 800051c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000520:	3801      	subs	r0, #1
 8000522:	e7a3      	b.n	800046c <__udivmoddi4+0x1f8>
 8000524:	4646      	mov	r6, r8
 8000526:	e7ea      	b.n	80004fe <__udivmoddi4+0x28a>
 8000528:	4620      	mov	r0, r4
 800052a:	e794      	b.n	8000456 <__udivmoddi4+0x1e2>
 800052c:	4640      	mov	r0, r8
 800052e:	e7d1      	b.n	80004d4 <__udivmoddi4+0x260>
 8000530:	46d0      	mov	r8, sl
 8000532:	e77b      	b.n	800042c <__udivmoddi4+0x1b8>
 8000534:	3b02      	subs	r3, #2
 8000536:	4461      	add	r1, ip
 8000538:	e732      	b.n	80003a0 <__udivmoddi4+0x12c>
 800053a:	4630      	mov	r0, r6
 800053c:	e709      	b.n	8000352 <__udivmoddi4+0xde>
 800053e:	4464      	add	r4, ip
 8000540:	3802      	subs	r0, #2
 8000542:	e742      	b.n	80003ca <__udivmoddi4+0x156>

08000544 <__aeabi_idiv0>:
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop

08000548 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000548:	b084      	sub	sp, #16

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054a:	2200      	movs	r2, #0
 800054c:	9201      	str	r2, [sp, #4]
 800054e:	4b10      	ldr	r3, [pc, #64]	; (8000590 <MX_GPIO_Init+0x48>)
 8000550:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000552:	f041 0101 	orr.w	r1, r1, #1
 8000556:	6319      	str	r1, [r3, #48]	; 0x30
 8000558:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800055a:	f001 0101 	and.w	r1, r1, #1
 800055e:	9101      	str	r1, [sp, #4]
 8000560:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000562:	9202      	str	r2, [sp, #8]
 8000564:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000566:	f041 0104 	orr.w	r1, r1, #4
 800056a:	6319      	str	r1, [r3, #48]	; 0x30
 800056c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800056e:	f001 0104 	and.w	r1, r1, #4
 8000572:	9102      	str	r1, [sp, #8]
 8000574:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000576:	9203      	str	r2, [sp, #12]
 8000578:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800057a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800057e:	631a      	str	r2, [r3, #48]	; 0x30
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000586:	9303      	str	r3, [sp, #12]
 8000588:	9b03      	ldr	r3, [sp, #12]

}
 800058a:	b004      	add	sp, #16
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	40023800 	.word	0x40023800

08000594 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000594:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000596:	e7fe      	b.n	8000596 <Error_Handler+0x2>

08000598 <SystemClock_Config>:
{
 8000598:	b500      	push	{lr}
 800059a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059c:	2230      	movs	r2, #48	; 0x30
 800059e:	2100      	movs	r1, #0
 80005a0:	a808      	add	r0, sp, #32
 80005a2:	f000 fcab 	bl	8000efc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a6:	2300      	movs	r3, #0
 80005a8:	9303      	str	r3, [sp, #12]
 80005aa:	9304      	str	r3, [sp, #16]
 80005ac:	9305      	str	r3, [sp, #20]
 80005ae:	9306      	str	r3, [sp, #24]
 80005b0:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b2:	9301      	str	r3, [sp, #4]
 80005b4:	4a20      	ldr	r2, [pc, #128]	; (8000638 <SystemClock_Config+0xa0>)
 80005b6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80005b8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80005bc:	6411      	str	r1, [r2, #64]	; 0x40
 80005be:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80005c0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80005c4:	9201      	str	r2, [sp, #4]
 80005c6:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c8:	9302      	str	r3, [sp, #8]
 80005ca:	4b1c      	ldr	r3, [pc, #112]	; (800063c <SystemClock_Config+0xa4>)
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005da:	9302      	str	r3, [sp, #8]
 80005dc:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005de:	2301      	movs	r3, #1
 80005e0:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e6:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e8:	2302      	movs	r3, #2
 80005ea:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ec:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80005f0:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80005f2:	2206      	movs	r2, #6
 80005f4:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005f6:	22a8      	movs	r2, #168	; 0xa8
 80005f8:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005fa:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005fc:	2304      	movs	r3, #4
 80005fe:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000600:	a808      	add	r0, sp, #32
 8000602:	f000 f8f1 	bl	80007e8 <HAL_RCC_OscConfig>
 8000606:	b998      	cbnz	r0, 8000630 <SystemClock_Config+0x98>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000608:	230f      	movs	r3, #15
 800060a:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060c:	2302      	movs	r3, #2
 800060e:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000614:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000618:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800061a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800061e:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000620:	2105      	movs	r1, #5
 8000622:	a803      	add	r0, sp, #12
 8000624:	f000 fb2e 	bl	8000c84 <HAL_RCC_ClockConfig>
 8000628:	b920      	cbnz	r0, 8000634 <SystemClock_Config+0x9c>
}
 800062a:	b015      	add	sp, #84	; 0x54
 800062c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000630:	f7ff ffb0 	bl	8000594 <Error_Handler>
    Error_Handler();
 8000634:	f7ff ffae 	bl	8000594 <Error_Handler>
 8000638:	40023800 	.word	0x40023800
 800063c:	40007000 	.word	0x40007000

08000640 <main>:
{
 8000640:	b508      	push	{r3, lr}
  HAL_Init();
 8000642:	f000 f82b 	bl	800069c <HAL_Init>
  SystemClock_Config();
 8000646:	f7ff ffa7 	bl	8000598 <SystemClock_Config>
  MX_GPIO_Init();
 800064a:	f7ff ff7d 	bl	8000548 <MX_GPIO_Init>
  while (1)
 800064e:	e7fe      	b.n	800064e <main+0xe>

08000650 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000650:	b510      	push	{r4, lr}
 8000652:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000654:	4b0e      	ldr	r3, [pc, #56]	; (8000690 <HAL_InitTick+0x40>)
 8000656:	7818      	ldrb	r0, [r3, #0]
 8000658:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800065c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000660:	4a0c      	ldr	r2, [pc, #48]	; (8000694 <HAL_InitTick+0x44>)
 8000662:	6810      	ldr	r0, [r2, #0]
 8000664:	fbb0 f0f3 	udiv	r0, r0, r3
 8000668:	f000 f88e 	bl	8000788 <HAL_SYSTICK_Config>
 800066c:	b968      	cbnz	r0, 800068a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800066e:	2c0f      	cmp	r4, #15
 8000670:	d901      	bls.n	8000676 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000672:	2001      	movs	r0, #1
 8000674:	e00a      	b.n	800068c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000676:	2200      	movs	r2, #0
 8000678:	4621      	mov	r1, r4
 800067a:	f04f 30ff 	mov.w	r0, #4294967295
 800067e:	f000 f84b 	bl	8000718 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000682:	4b05      	ldr	r3, [pc, #20]	; (8000698 <HAL_InitTick+0x48>)
 8000684:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8000686:	2000      	movs	r0, #0
 8000688:	e000      	b.n	800068c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800068a:	2001      	movs	r0, #1
}
 800068c:	bd10      	pop	{r4, pc}
 800068e:	bf00      	nop
 8000690:	20000000 	.word	0x20000000
 8000694:	20000008 	.word	0x20000008
 8000698:	20000004 	.word	0x20000004

0800069c <HAL_Init>:
{
 800069c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <HAL_Init+0x30>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80006a6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80006ae:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80006b6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006b8:	2003      	movs	r0, #3
 80006ba:	f000 f81b 	bl	80006f4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80006be:	200f      	movs	r0, #15
 80006c0:	f7ff ffc6 	bl	8000650 <HAL_InitTick>
  HAL_MspInit();
 80006c4:	f000 f874 	bl	80007b0 <HAL_MspInit>
}
 80006c8:	2000      	movs	r0, #0
 80006ca:	bd08      	pop	{r3, pc}
 80006cc:	40023c00 	.word	0x40023c00

080006d0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80006d0:	4a03      	ldr	r2, [pc, #12]	; (80006e0 <HAL_IncTick+0x10>)
 80006d2:	6811      	ldr	r1, [r2, #0]
 80006d4:	4b03      	ldr	r3, [pc, #12]	; (80006e4 <HAL_IncTick+0x14>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	440b      	add	r3, r1
 80006da:	6013      	str	r3, [r2, #0]
}
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	2000008c 	.word	0x2000008c
 80006e4:	20000000 	.word	0x20000000

080006e8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80006e8:	4b01      	ldr	r3, [pc, #4]	; (80006f0 <HAL_GetTick+0x8>)
 80006ea:	6818      	ldr	r0, [r3, #0]
}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	2000008c 	.word	0x2000008c

080006f4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f4:	4a07      	ldr	r2, [pc, #28]	; (8000714 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80006f6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006f8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006fc:	041b      	lsls	r3, r3, #16
 80006fe:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000700:	0200      	lsls	r0, r0, #8
 8000702:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000706:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8000708:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800070c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000710:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000712:	4770      	bx	lr
 8000714:	e000ed00 	.word	0xe000ed00

08000718 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000718:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800071a:	4b19      	ldr	r3, [pc, #100]	; (8000780 <HAL_NVIC_SetPriority+0x68>)
 800071c:	68db      	ldr	r3, [r3, #12]
 800071e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000722:	f1c3 0c07 	rsb	ip, r3, #7
 8000726:	f1bc 0f04 	cmp.w	ip, #4
 800072a:	bf28      	it	cs
 800072c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000730:	f103 0e04 	add.w	lr, r3, #4
 8000734:	f1be 0f06 	cmp.w	lr, #6
 8000738:	d918      	bls.n	800076c <HAL_NVIC_SetPriority+0x54>
 800073a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	f04f 3eff 	mov.w	lr, #4294967295
 8000740:	fa0e fc0c 	lsl.w	ip, lr, ip
 8000744:	ea21 010c 	bic.w	r1, r1, ip
 8000748:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800074a:	fa0e f303 	lsl.w	r3, lr, r3
 800074e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000752:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000754:	2800      	cmp	r0, #0
 8000756:	db0b      	blt.n	8000770 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000758:	0109      	lsls	r1, r1, #4
 800075a:	b2c9      	uxtb	r1, r1
 800075c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000760:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000764:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000768:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800076c:	2300      	movs	r3, #0
 800076e:	e7e5      	b.n	800073c <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000770:	f000 000f 	and.w	r0, r0, #15
 8000774:	0109      	lsls	r1, r1, #4
 8000776:	b2c9      	uxtb	r1, r1
 8000778:	4b02      	ldr	r3, [pc, #8]	; (8000784 <HAL_NVIC_SetPriority+0x6c>)
 800077a:	5419      	strb	r1, [r3, r0]
 800077c:	e7f4      	b.n	8000768 <HAL_NVIC_SetPriority+0x50>
 800077e:	bf00      	nop
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	e000ed14 	.word	0xe000ed14

08000788 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000788:	3801      	subs	r0, #1
 800078a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800078e:	d20b      	bcs.n	80007a8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000790:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000794:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000796:	4a05      	ldr	r2, [pc, #20]	; (80007ac <HAL_SYSTICK_Config+0x24>)
 8000798:	21f0      	movs	r1, #240	; 0xf0
 800079a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800079e:	2000      	movs	r0, #0
 80007a0:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007a2:	2207      	movs	r2, #7
 80007a4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007a6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80007a8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80007aa:	4770      	bx	lr
 80007ac:	e000ed00 	.word	0xe000ed00

080007b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b0:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b2:	2100      	movs	r1, #0
 80007b4:	9100      	str	r1, [sp, #0]
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <HAL_MspInit+0x34>)
 80007b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80007be:	645a      	str	r2, [r3, #68]	; 0x44
 80007c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80007c2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80007c6:	9200      	str	r2, [sp, #0]
 80007c8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ca:	9101      	str	r1, [sp, #4]
 80007cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80007d2:	641a      	str	r2, [r3, #64]	; 0x40
 80007d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007da:	9301      	str	r3, [sp, #4]
 80007dc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007de:	b002      	add	sp, #8
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	40023800 	.word	0x40023800

080007e8 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80007e8:	2800      	cmp	r0, #0
 80007ea:	f000 81e0 	beq.w	8000bae <HAL_RCC_OscConfig+0x3c6>
{
 80007ee:	b570      	push	{r4, r5, r6, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007f4:	6803      	ldr	r3, [r0, #0]
 80007f6:	f013 0f01 	tst.w	r3, #1
 80007fa:	d03b      	beq.n	8000874 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80007fc:	4b9f      	ldr	r3, [pc, #636]	; (8000a7c <HAL_RCC_OscConfig+0x294>)
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	f003 030c 	and.w	r3, r3, #12
 8000804:	2b04      	cmp	r3, #4
 8000806:	d02c      	beq.n	8000862 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000808:	4b9c      	ldr	r3, [pc, #624]	; (8000a7c <HAL_RCC_OscConfig+0x294>)
 800080a:	689b      	ldr	r3, [r3, #8]
 800080c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000810:	2b08      	cmp	r3, #8
 8000812:	d021      	beq.n	8000858 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000814:	6863      	ldr	r3, [r4, #4]
 8000816:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800081a:	d04f      	beq.n	80008bc <HAL_RCC_OscConfig+0xd4>
 800081c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000820:	d052      	beq.n	80008c8 <HAL_RCC_OscConfig+0xe0>
 8000822:	4b96      	ldr	r3, [pc, #600]	; (8000a7c <HAL_RCC_OscConfig+0x294>)
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000832:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000834:	6863      	ldr	r3, [r4, #4]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d050      	beq.n	80008dc <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800083a:	f7ff ff55 	bl	80006e8 <HAL_GetTick>
 800083e:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000840:	4b8e      	ldr	r3, [pc, #568]	; (8000a7c <HAL_RCC_OscConfig+0x294>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000848:	d114      	bne.n	8000874 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800084a:	f7ff ff4d 	bl	80006e8 <HAL_GetTick>
 800084e:	1b40      	subs	r0, r0, r5
 8000850:	2864      	cmp	r0, #100	; 0x64
 8000852:	d9f5      	bls.n	8000840 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8000854:	2003      	movs	r0, #3
 8000856:	e1b1      	b.n	8000bbc <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000858:	4b88      	ldr	r3, [pc, #544]	; (8000a7c <HAL_RCC_OscConfig+0x294>)
 800085a:	685b      	ldr	r3, [r3, #4]
 800085c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000860:	d0d8      	beq.n	8000814 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000862:	4b86      	ldr	r3, [pc, #536]	; (8000a7c <HAL_RCC_OscConfig+0x294>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800086a:	d003      	beq.n	8000874 <HAL_RCC_OscConfig+0x8c>
 800086c:	6863      	ldr	r3, [r4, #4]
 800086e:	2b00      	cmp	r3, #0
 8000870:	f000 819f 	beq.w	8000bb2 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000874:	6823      	ldr	r3, [r4, #0]
 8000876:	f013 0f02 	tst.w	r3, #2
 800087a:	d054      	beq.n	8000926 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800087c:	4b7f      	ldr	r3, [pc, #508]	; (8000a7c <HAL_RCC_OscConfig+0x294>)
 800087e:	689b      	ldr	r3, [r3, #8]
 8000880:	f013 0f0c 	tst.w	r3, #12
 8000884:	d03e      	beq.n	8000904 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000886:	4b7d      	ldr	r3, [pc, #500]	; (8000a7c <HAL_RCC_OscConfig+0x294>)
 8000888:	689b      	ldr	r3, [r3, #8]
 800088a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800088e:	2b08      	cmp	r3, #8
 8000890:	d033      	beq.n	80008fa <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000892:	68e3      	ldr	r3, [r4, #12]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d068      	beq.n	800096a <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000898:	4b79      	ldr	r3, [pc, #484]	; (8000a80 <HAL_RCC_OscConfig+0x298>)
 800089a:	2201      	movs	r2, #1
 800089c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800089e:	f7ff ff23 	bl	80006e8 <HAL_GetTick>
 80008a2:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008a4:	4b75      	ldr	r3, [pc, #468]	; (8000a7c <HAL_RCC_OscConfig+0x294>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f013 0f02 	tst.w	r3, #2
 80008ac:	d154      	bne.n	8000958 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008ae:	f7ff ff1b 	bl	80006e8 <HAL_GetTick>
 80008b2:	1b40      	subs	r0, r0, r5
 80008b4:	2802      	cmp	r0, #2
 80008b6:	d9f5      	bls.n	80008a4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80008b8:	2003      	movs	r0, #3
 80008ba:	e17f      	b.n	8000bbc <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008bc:	4a6f      	ldr	r2, [pc, #444]	; (8000a7c <HAL_RCC_OscConfig+0x294>)
 80008be:	6813      	ldr	r3, [r2, #0]
 80008c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008c4:	6013      	str	r3, [r2, #0]
 80008c6:	e7b5      	b.n	8000834 <HAL_RCC_OscConfig+0x4c>
 80008c8:	4b6c      	ldr	r3, [pc, #432]	; (8000a7c <HAL_RCC_OscConfig+0x294>)
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	e7ab      	b.n	8000834 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80008dc:	f7ff ff04 	bl	80006e8 <HAL_GetTick>
 80008e0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008e2:	4b66      	ldr	r3, [pc, #408]	; (8000a7c <HAL_RCC_OscConfig+0x294>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80008ea:	d0c3      	beq.n	8000874 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008ec:	f7ff fefc 	bl	80006e8 <HAL_GetTick>
 80008f0:	1b40      	subs	r0, r0, r5
 80008f2:	2864      	cmp	r0, #100	; 0x64
 80008f4:	d9f5      	bls.n	80008e2 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80008f6:	2003      	movs	r0, #3
 80008f8:	e160      	b.n	8000bbc <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008fa:	4b60      	ldr	r3, [pc, #384]	; (8000a7c <HAL_RCC_OscConfig+0x294>)
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000902:	d1c6      	bne.n	8000892 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000904:	4b5d      	ldr	r3, [pc, #372]	; (8000a7c <HAL_RCC_OscConfig+0x294>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f013 0f02 	tst.w	r3, #2
 800090c:	d003      	beq.n	8000916 <HAL_RCC_OscConfig+0x12e>
 800090e:	68e3      	ldr	r3, [r4, #12]
 8000910:	2b01      	cmp	r3, #1
 8000912:	f040 8150 	bne.w	8000bb6 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000916:	4a59      	ldr	r2, [pc, #356]	; (8000a7c <HAL_RCC_OscConfig+0x294>)
 8000918:	6813      	ldr	r3, [r2, #0]
 800091a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800091e:	6921      	ldr	r1, [r4, #16]
 8000920:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000924:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000926:	6823      	ldr	r3, [r4, #0]
 8000928:	f013 0f08 	tst.w	r3, #8
 800092c:	d042      	beq.n	80009b4 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800092e:	6963      	ldr	r3, [r4, #20]
 8000930:	b36b      	cbz	r3, 800098e <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000932:	4b53      	ldr	r3, [pc, #332]	; (8000a80 <HAL_RCC_OscConfig+0x298>)
 8000934:	2201      	movs	r2, #1
 8000936:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800093a:	f7ff fed5 	bl	80006e8 <HAL_GetTick>
 800093e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000940:	4b4e      	ldr	r3, [pc, #312]	; (8000a7c <HAL_RCC_OscConfig+0x294>)
 8000942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000944:	f013 0f02 	tst.w	r3, #2
 8000948:	d134      	bne.n	80009b4 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800094a:	f7ff fecd 	bl	80006e8 <HAL_GetTick>
 800094e:	1b40      	subs	r0, r0, r5
 8000950:	2802      	cmp	r0, #2
 8000952:	d9f5      	bls.n	8000940 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8000954:	2003      	movs	r0, #3
 8000956:	e131      	b.n	8000bbc <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000958:	4a48      	ldr	r2, [pc, #288]	; (8000a7c <HAL_RCC_OscConfig+0x294>)
 800095a:	6813      	ldr	r3, [r2, #0]
 800095c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000960:	6921      	ldr	r1, [r4, #16]
 8000962:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000966:	6013      	str	r3, [r2, #0]
 8000968:	e7dd      	b.n	8000926 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 800096a:	4b45      	ldr	r3, [pc, #276]	; (8000a80 <HAL_RCC_OscConfig+0x298>)
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000970:	f7ff feba 	bl	80006e8 <HAL_GetTick>
 8000974:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000976:	4b41      	ldr	r3, [pc, #260]	; (8000a7c <HAL_RCC_OscConfig+0x294>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f013 0f02 	tst.w	r3, #2
 800097e:	d0d2      	beq.n	8000926 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000980:	f7ff feb2 	bl	80006e8 <HAL_GetTick>
 8000984:	1b40      	subs	r0, r0, r5
 8000986:	2802      	cmp	r0, #2
 8000988:	d9f5      	bls.n	8000976 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 800098a:	2003      	movs	r0, #3
 800098c:	e116      	b.n	8000bbc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800098e:	4b3c      	ldr	r3, [pc, #240]	; (8000a80 <HAL_RCC_OscConfig+0x298>)
 8000990:	2200      	movs	r2, #0
 8000992:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000996:	f7ff fea7 	bl	80006e8 <HAL_GetTick>
 800099a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800099c:	4b37      	ldr	r3, [pc, #220]	; (8000a7c <HAL_RCC_OscConfig+0x294>)
 800099e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80009a0:	f013 0f02 	tst.w	r3, #2
 80009a4:	d006      	beq.n	80009b4 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009a6:	f7ff fe9f 	bl	80006e8 <HAL_GetTick>
 80009aa:	1b40      	subs	r0, r0, r5
 80009ac:	2802      	cmp	r0, #2
 80009ae:	d9f5      	bls.n	800099c <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 80009b0:	2003      	movs	r0, #3
 80009b2:	e103      	b.n	8000bbc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009b4:	6823      	ldr	r3, [r4, #0]
 80009b6:	f013 0f04 	tst.w	r3, #4
 80009ba:	d077      	beq.n	8000aac <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009bc:	4b2f      	ldr	r3, [pc, #188]	; (8000a7c <HAL_RCC_OscConfig+0x294>)
 80009be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80009c4:	d133      	bne.n	8000a2e <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	9301      	str	r3, [sp, #4]
 80009ca:	4b2c      	ldr	r3, [pc, #176]	; (8000a7c <HAL_RCC_OscConfig+0x294>)
 80009cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009d2:	641a      	str	r2, [r3, #64]	; 0x40
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009da:	9301      	str	r3, [sp, #4]
 80009dc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80009de:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009e0:	4b28      	ldr	r3, [pc, #160]	; (8000a84 <HAL_RCC_OscConfig+0x29c>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80009e8:	d023      	beq.n	8000a32 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009ea:	68a3      	ldr	r3, [r4, #8]
 80009ec:	2b01      	cmp	r3, #1
 80009ee:	d034      	beq.n	8000a5a <HAL_RCC_OscConfig+0x272>
 80009f0:	2b05      	cmp	r3, #5
 80009f2:	d038      	beq.n	8000a66 <HAL_RCC_OscConfig+0x27e>
 80009f4:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <HAL_RCC_OscConfig+0x294>)
 80009f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80009f8:	f022 0201 	bic.w	r2, r2, #1
 80009fc:	671a      	str	r2, [r3, #112]	; 0x70
 80009fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000a00:	f022 0204 	bic.w	r2, r2, #4
 8000a04:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a06:	68a3      	ldr	r3, [r4, #8]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d03d      	beq.n	8000a88 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a0c:	f7ff fe6c 	bl	80006e8 <HAL_GetTick>
 8000a10:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a12:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <HAL_RCC_OscConfig+0x294>)
 8000a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000a16:	f013 0f02 	tst.w	r3, #2
 8000a1a:	d146      	bne.n	8000aaa <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a1c:	f7ff fe64 	bl	80006e8 <HAL_GetTick>
 8000a20:	1b80      	subs	r0, r0, r6
 8000a22:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a26:	4298      	cmp	r0, r3
 8000a28:	d9f3      	bls.n	8000a12 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8000a2a:	2003      	movs	r0, #3
 8000a2c:	e0c6      	b.n	8000bbc <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8000a2e:	2500      	movs	r5, #0
 8000a30:	e7d6      	b.n	80009e0 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a32:	4a14      	ldr	r2, [pc, #80]	; (8000a84 <HAL_RCC_OscConfig+0x29c>)
 8000a34:	6813      	ldr	r3, [r2, #0]
 8000a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a3a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000a3c:	f7ff fe54 	bl	80006e8 <HAL_GetTick>
 8000a40:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a42:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <HAL_RCC_OscConfig+0x29c>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000a4a:	d1ce      	bne.n	80009ea <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a4c:	f7ff fe4c 	bl	80006e8 <HAL_GetTick>
 8000a50:	1b80      	subs	r0, r0, r6
 8000a52:	2802      	cmp	r0, #2
 8000a54:	d9f5      	bls.n	8000a42 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8000a56:	2003      	movs	r0, #3
 8000a58:	e0b0      	b.n	8000bbc <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a5a:	4a08      	ldr	r2, [pc, #32]	; (8000a7c <HAL_RCC_OscConfig+0x294>)
 8000a5c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8000a5e:	f043 0301 	orr.w	r3, r3, #1
 8000a62:	6713      	str	r3, [r2, #112]	; 0x70
 8000a64:	e7cf      	b.n	8000a06 <HAL_RCC_OscConfig+0x21e>
 8000a66:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <HAL_RCC_OscConfig+0x294>)
 8000a68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000a6a:	f042 0204 	orr.w	r2, r2, #4
 8000a6e:	671a      	str	r2, [r3, #112]	; 0x70
 8000a70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000a72:	f042 0201 	orr.w	r2, r2, #1
 8000a76:	671a      	str	r2, [r3, #112]	; 0x70
 8000a78:	e7c5      	b.n	8000a06 <HAL_RCC_OscConfig+0x21e>
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	42470000 	.word	0x42470000
 8000a84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a88:	f7ff fe2e 	bl	80006e8 <HAL_GetTick>
 8000a8c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a8e:	4b52      	ldr	r3, [pc, #328]	; (8000bd8 <HAL_RCC_OscConfig+0x3f0>)
 8000a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000a92:	f013 0f02 	tst.w	r3, #2
 8000a96:	d008      	beq.n	8000aaa <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a98:	f7ff fe26 	bl	80006e8 <HAL_GetTick>
 8000a9c:	1b80      	subs	r0, r0, r6
 8000a9e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000aa2:	4298      	cmp	r0, r3
 8000aa4:	d9f3      	bls.n	8000a8e <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8000aa6:	2003      	movs	r0, #3
 8000aa8:	e088      	b.n	8000bbc <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000aaa:	b9ed      	cbnz	r5, 8000ae8 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000aac:	69a3      	ldr	r3, [r4, #24]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	f000 8083 	beq.w	8000bba <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ab4:	4a48      	ldr	r2, [pc, #288]	; (8000bd8 <HAL_RCC_OscConfig+0x3f0>)
 8000ab6:	6892      	ldr	r2, [r2, #8]
 8000ab8:	f002 020c 	and.w	r2, r2, #12
 8000abc:	2a08      	cmp	r2, #8
 8000abe:	d051      	beq.n	8000b64 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	d017      	beq.n	8000af4 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ac4:	4b45      	ldr	r3, [pc, #276]	; (8000bdc <HAL_RCC_OscConfig+0x3f4>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000aca:	f7ff fe0d 	bl	80006e8 <HAL_GetTick>
 8000ace:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ad0:	4b41      	ldr	r3, [pc, #260]	; (8000bd8 <HAL_RCC_OscConfig+0x3f0>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000ad8:	d042      	beq.n	8000b60 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ada:	f7ff fe05 	bl	80006e8 <HAL_GetTick>
 8000ade:	1b00      	subs	r0, r0, r4
 8000ae0:	2802      	cmp	r0, #2
 8000ae2:	d9f5      	bls.n	8000ad0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8000ae4:	2003      	movs	r0, #3
 8000ae6:	e069      	b.n	8000bbc <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ae8:	4a3b      	ldr	r2, [pc, #236]	; (8000bd8 <HAL_RCC_OscConfig+0x3f0>)
 8000aea:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000aec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000af0:	6413      	str	r3, [r2, #64]	; 0x40
 8000af2:	e7db      	b.n	8000aac <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8000af4:	4b39      	ldr	r3, [pc, #228]	; (8000bdc <HAL_RCC_OscConfig+0x3f4>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8000afa:	f7ff fdf5 	bl	80006e8 <HAL_GetTick>
 8000afe:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b00:	4b35      	ldr	r3, [pc, #212]	; (8000bd8 <HAL_RCC_OscConfig+0x3f0>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000b08:	d006      	beq.n	8000b18 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b0a:	f7ff fded 	bl	80006e8 <HAL_GetTick>
 8000b0e:	1b40      	subs	r0, r0, r5
 8000b10:	2802      	cmp	r0, #2
 8000b12:	d9f5      	bls.n	8000b00 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8000b14:	2003      	movs	r0, #3
 8000b16:	e051      	b.n	8000bbc <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b18:	69e3      	ldr	r3, [r4, #28]
 8000b1a:	6a22      	ldr	r2, [r4, #32]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b20:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b24:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000b26:	0852      	lsrs	r2, r2, #1
 8000b28:	3a01      	subs	r2, #1
 8000b2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b2e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b30:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b34:	4a28      	ldr	r2, [pc, #160]	; (8000bd8 <HAL_RCC_OscConfig+0x3f0>)
 8000b36:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b38:	4b28      	ldr	r3, [pc, #160]	; (8000bdc <HAL_RCC_OscConfig+0x3f4>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8000b3e:	f7ff fdd3 	bl	80006e8 <HAL_GetTick>
 8000b42:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b44:	4b24      	ldr	r3, [pc, #144]	; (8000bd8 <HAL_RCC_OscConfig+0x3f0>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000b4c:	d106      	bne.n	8000b5c <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b4e:	f7ff fdcb 	bl	80006e8 <HAL_GetTick>
 8000b52:	1b00      	subs	r0, r0, r4
 8000b54:	2802      	cmp	r0, #2
 8000b56:	d9f5      	bls.n	8000b44 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8000b58:	2003      	movs	r0, #3
 8000b5a:	e02f      	b.n	8000bbc <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	e02d      	b.n	8000bbc <HAL_RCC_OscConfig+0x3d4>
 8000b60:	2000      	movs	r0, #0
 8000b62:	e02b      	b.n	8000bbc <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d02b      	beq.n	8000bc0 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8000b68:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <HAL_RCC_OscConfig+0x3f0>)
 8000b6a:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b6c:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8000b70:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000b72:	4291      	cmp	r1, r2
 8000b74:	d126      	bne.n	8000bc4 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000b76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000b7a:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b7c:	428a      	cmp	r2, r1
 8000b7e:	d123      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000b80:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000b82:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8000b86:	401a      	ands	r2, r3
 8000b88:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8000b8c:	d11e      	bne.n	8000bcc <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000b8e:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000b92:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000b94:	0852      	lsrs	r2, r2, #1
 8000b96:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000b98:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8000b9c:	d118      	bne.n	8000bd0 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000b9e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8000ba2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000ba4:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8000ba8:	d114      	bne.n	8000bd4 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8000baa:	2000      	movs	r0, #0
 8000bac:	e006      	b.n	8000bbc <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8000bae:	2001      	movs	r0, #1
}
 8000bb0:	4770      	bx	lr
        return HAL_ERROR;
 8000bb2:	2001      	movs	r0, #1
 8000bb4:	e002      	b.n	8000bbc <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	e000      	b.n	8000bbc <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8000bba:	2000      	movs	r0, #0
}
 8000bbc:	b002      	add	sp, #8
 8000bbe:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	e7fb      	b.n	8000bbc <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	e7f9      	b.n	8000bbc <HAL_RCC_OscConfig+0x3d4>
 8000bc8:	2001      	movs	r0, #1
 8000bca:	e7f7      	b.n	8000bbc <HAL_RCC_OscConfig+0x3d4>
 8000bcc:	2001      	movs	r0, #1
 8000bce:	e7f5      	b.n	8000bbc <HAL_RCC_OscConfig+0x3d4>
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	e7f3      	b.n	8000bbc <HAL_RCC_OscConfig+0x3d4>
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	e7f1      	b.n	8000bbc <HAL_RCC_OscConfig+0x3d4>
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	42470000 	.word	0x42470000

08000be0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000be0:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000be2:	4b25      	ldr	r3, [pc, #148]	; (8000c78 <HAL_RCC_GetSysClockFreq+0x98>)
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	f003 030c 	and.w	r3, r3, #12
 8000bea:	2b04      	cmp	r3, #4
 8000bec:	d03f      	beq.n	8000c6e <HAL_RCC_GetSysClockFreq+0x8e>
 8000bee:	2b08      	cmp	r3, #8
 8000bf0:	d13f      	bne.n	8000c72 <HAL_RCC_GetSysClockFreq+0x92>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bf2:	4b21      	ldr	r3, [pc, #132]	; (8000c78 <HAL_RCC_GetSysClockFreq+0x98>)
 8000bf4:	685a      	ldr	r2, [r3, #4]
 8000bf6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000c00:	d012      	beq.n	8000c28 <HAL_RCC_GetSysClockFreq+0x48>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c02:	4b1d      	ldr	r3, [pc, #116]	; (8000c78 <HAL_RCC_GetSysClockFreq+0x98>)
 8000c04:	6859      	ldr	r1, [r3, #4]
 8000c06:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c0a:	481c      	ldr	r0, [pc, #112]	; (8000c7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	fba1 0100 	umull	r0, r1, r1, r0
 8000c12:	f7ff fb17 	bl	8000244 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000c16:	4b18      	ldr	r3, [pc, #96]	; (8000c78 <HAL_RCC_GetSysClockFreq+0x98>)
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c1e:	3301      	adds	r3, #1
 8000c20:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8000c22:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8000c26:	e025      	b.n	8000c74 <HAL_RCC_GetSysClockFreq+0x94>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c28:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <HAL_RCC_GetSysClockFreq+0x98>)
 8000c2a:	6859      	ldr	r1, [r3, #4]
 8000c2c:	f3c1 1c88 	ubfx	ip, r1, #6, #9
 8000c30:	ea4f 114c 	mov.w	r1, ip, lsl #5
 8000c34:	ebb1 000c 	subs.w	r0, r1, ip
 8000c38:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8000c3c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8000c40:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8000c44:	0181      	lsls	r1, r0, #6
 8000c46:	1a09      	subs	r1, r1, r0
 8000c48:	eb63 030e 	sbc.w	r3, r3, lr
 8000c4c:	00db      	lsls	r3, r3, #3
 8000c4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000c52:	00c9      	lsls	r1, r1, #3
 8000c54:	eb11 0c0c 	adds.w	ip, r1, ip
 8000c58:	f143 0300 	adc.w	r3, r3, #0
 8000c5c:	0299      	lsls	r1, r3, #10
 8000c5e:	2300      	movs	r3, #0
 8000c60:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8000c64:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8000c68:	f7ff faec 	bl	8000244 <__aeabi_uldivmod>
 8000c6c:	e7d3      	b.n	8000c16 <HAL_RCC_GetSysClockFreq+0x36>
      sysclockfreq = HSE_VALUE;
 8000c6e:	4803      	ldr	r0, [pc, #12]	; (8000c7c <HAL_RCC_GetSysClockFreq+0x9c>)
 8000c70:	e000      	b.n	8000c74 <HAL_RCC_GetSysClockFreq+0x94>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c72:	4803      	ldr	r0, [pc, #12]	; (8000c80 <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c74:	bd08      	pop	{r3, pc}
 8000c76:	bf00      	nop
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	00b71b00 	.word	0x00b71b00
 8000c80:	00f42400 	.word	0x00f42400

08000c84 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8000c84:	2800      	cmp	r0, #0
 8000c86:	f000 809b 	beq.w	8000dc0 <HAL_RCC_ClockConfig+0x13c>
{
 8000c8a:	b570      	push	{r4, r5, r6, lr}
 8000c8c:	460d      	mov	r5, r1
 8000c8e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c90:	4b4f      	ldr	r3, [pc, #316]	; (8000dd0 <HAL_RCC_ClockConfig+0x14c>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f003 0307 	and.w	r3, r3, #7
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	d208      	bcs.n	8000cae <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c9c:	b2cb      	uxtb	r3, r1
 8000c9e:	4a4c      	ldr	r2, [pc, #304]	; (8000dd0 <HAL_RCC_ClockConfig+0x14c>)
 8000ca0:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ca2:	6813      	ldr	r3, [r2, #0]
 8000ca4:	f003 0307 	and.w	r3, r3, #7
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	f040 808b 	bne.w	8000dc4 <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cae:	6823      	ldr	r3, [r4, #0]
 8000cb0:	f013 0f02 	tst.w	r3, #2
 8000cb4:	d017      	beq.n	8000ce6 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cb6:	f013 0f04 	tst.w	r3, #4
 8000cba:	d004      	beq.n	8000cc6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000cbc:	4a45      	ldr	r2, [pc, #276]	; (8000dd4 <HAL_RCC_ClockConfig+0x150>)
 8000cbe:	6893      	ldr	r3, [r2, #8]
 8000cc0:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000cc4:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cc6:	6823      	ldr	r3, [r4, #0]
 8000cc8:	f013 0f08 	tst.w	r3, #8
 8000ccc:	d004      	beq.n	8000cd8 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cce:	4a41      	ldr	r2, [pc, #260]	; (8000dd4 <HAL_RCC_ClockConfig+0x150>)
 8000cd0:	6893      	ldr	r3, [r2, #8]
 8000cd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000cd6:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cd8:	4a3e      	ldr	r2, [pc, #248]	; (8000dd4 <HAL_RCC_ClockConfig+0x150>)
 8000cda:	6893      	ldr	r3, [r2, #8]
 8000cdc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ce0:	68a1      	ldr	r1, [r4, #8]
 8000ce2:	430b      	orrs	r3, r1
 8000ce4:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000ce6:	6823      	ldr	r3, [r4, #0]
 8000ce8:	f013 0f01 	tst.w	r3, #1
 8000cec:	d032      	beq.n	8000d54 <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cee:	6863      	ldr	r3, [r4, #4]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d021      	beq.n	8000d38 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cf4:	1e9a      	subs	r2, r3, #2
 8000cf6:	2a01      	cmp	r2, #1
 8000cf8:	d925      	bls.n	8000d46 <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cfa:	4a36      	ldr	r2, [pc, #216]	; (8000dd4 <HAL_RCC_ClockConfig+0x150>)
 8000cfc:	6812      	ldr	r2, [r2, #0]
 8000cfe:	f012 0f02 	tst.w	r2, #2
 8000d02:	d061      	beq.n	8000dc8 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d04:	4933      	ldr	r1, [pc, #204]	; (8000dd4 <HAL_RCC_ClockConfig+0x150>)
 8000d06:	688a      	ldr	r2, [r1, #8]
 8000d08:	f022 0203 	bic.w	r2, r2, #3
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8000d10:	f7ff fcea 	bl	80006e8 <HAL_GetTick>
 8000d14:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d16:	4b2f      	ldr	r3, [pc, #188]	; (8000dd4 <HAL_RCC_ClockConfig+0x150>)
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	f003 030c 	and.w	r3, r3, #12
 8000d1e:	6862      	ldr	r2, [r4, #4]
 8000d20:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d24:	d016      	beq.n	8000d54 <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d26:	f7ff fcdf 	bl	80006e8 <HAL_GetTick>
 8000d2a:	1b80      	subs	r0, r0, r6
 8000d2c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d30:	4298      	cmp	r0, r3
 8000d32:	d9f0      	bls.n	8000d16 <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8000d34:	2003      	movs	r0, #3
 8000d36:	e042      	b.n	8000dbe <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d38:	4a26      	ldr	r2, [pc, #152]	; (8000dd4 <HAL_RCC_ClockConfig+0x150>)
 8000d3a:	6812      	ldr	r2, [r2, #0]
 8000d3c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000d40:	d1e0      	bne.n	8000d04 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8000d42:	2001      	movs	r0, #1
 8000d44:	e03b      	b.n	8000dbe <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d46:	4a23      	ldr	r2, [pc, #140]	; (8000dd4 <HAL_RCC_ClockConfig+0x150>)
 8000d48:	6812      	ldr	r2, [r2, #0]
 8000d4a:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000d4e:	d1d9      	bne.n	8000d04 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8000d50:	2001      	movs	r0, #1
 8000d52:	e034      	b.n	8000dbe <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000d54:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <HAL_RCC_ClockConfig+0x14c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f003 0307 	and.w	r3, r3, #7
 8000d5c:	42ab      	cmp	r3, r5
 8000d5e:	d907      	bls.n	8000d70 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d60:	b2ea      	uxtb	r2, r5
 8000d62:	4b1b      	ldr	r3, [pc, #108]	; (8000dd0 <HAL_RCC_ClockConfig+0x14c>)
 8000d64:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f003 0307 	and.w	r3, r3, #7
 8000d6c:	42ab      	cmp	r3, r5
 8000d6e:	d12d      	bne.n	8000dcc <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d70:	6823      	ldr	r3, [r4, #0]
 8000d72:	f013 0f04 	tst.w	r3, #4
 8000d76:	d006      	beq.n	8000d86 <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d78:	4a16      	ldr	r2, [pc, #88]	; (8000dd4 <HAL_RCC_ClockConfig+0x150>)
 8000d7a:	6893      	ldr	r3, [r2, #8]
 8000d7c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d80:	68e1      	ldr	r1, [r4, #12]
 8000d82:	430b      	orrs	r3, r1
 8000d84:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d86:	6823      	ldr	r3, [r4, #0]
 8000d88:	f013 0f08 	tst.w	r3, #8
 8000d8c:	d007      	beq.n	8000d9e <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000d8e:	4a11      	ldr	r2, [pc, #68]	; (8000dd4 <HAL_RCC_ClockConfig+0x150>)
 8000d90:	6893      	ldr	r3, [r2, #8]
 8000d92:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000d96:	6921      	ldr	r1, [r4, #16]
 8000d98:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000d9c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000d9e:	f7ff ff1f 	bl	8000be0 <HAL_RCC_GetSysClockFreq>
 8000da2:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <HAL_RCC_ClockConfig+0x150>)
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000daa:	4a0b      	ldr	r2, [pc, #44]	; (8000dd8 <HAL_RCC_ClockConfig+0x154>)
 8000dac:	5cd3      	ldrb	r3, [r2, r3]
 8000dae:	40d8      	lsrs	r0, r3
 8000db0:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <HAL_RCC_ClockConfig+0x158>)
 8000db2:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000db4:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <HAL_RCC_ClockConfig+0x15c>)
 8000db6:	6818      	ldr	r0, [r3, #0]
 8000db8:	f7ff fc4a 	bl	8000650 <HAL_InitTick>
  return HAL_OK;
 8000dbc:	2000      	movs	r0, #0
}
 8000dbe:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000dc0:	2001      	movs	r0, #1
}
 8000dc2:	4770      	bx	lr
      return HAL_ERROR;
 8000dc4:	2001      	movs	r0, #1
 8000dc6:	e7fa      	b.n	8000dbe <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8000dc8:	2001      	movs	r0, #1
 8000dca:	e7f8      	b.n	8000dbe <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8000dcc:	2001      	movs	r0, #1
 8000dce:	e7f6      	b.n	8000dbe <HAL_RCC_ClockConfig+0x13a>
 8000dd0:	40023c00 	.word	0x40023c00
 8000dd4:	40023800 	.word	0x40023800
 8000dd8:	08000f24 	.word	0x08000f24
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	20000004 	.word	0x20000004

08000de4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000de4:	e7fe      	b.n	8000de4 <NMI_Handler>

08000de6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <HardFault_Handler>

08000de8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <MemManage_Handler>

08000dea <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dea:	e7fe      	b.n	8000dea <BusFault_Handler>

08000dec <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dec:	e7fe      	b.n	8000dec <UsageFault_Handler>

08000dee <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dee:	4770      	bx	lr

08000df0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df0:	4770      	bx	lr

08000df2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df2:	4770      	bx	lr

08000df4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df6:	f7ff fc6b 	bl	80006d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dfa:	bd08      	pop	{r3, pc}

08000dfc <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 8000dfc:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000dfe:	f000 f83f 	bl	8000e80 <__errno>
 8000e02:	2316      	movs	r3, #22
 8000e04:	6003      	str	r3, [r0, #0]
  return -1;
}
 8000e06:	f04f 30ff 	mov.w	r0, #4294967295
 8000e0a:	bd08      	pop	{r3, pc}

08000e0c <_exit>:

void _exit (int status)
{
 8000e0c:	b508      	push	{r3, lr}
  _kill(status, -1);
 8000e0e:	f04f 31ff 	mov.w	r1, #4294967295
 8000e12:	f7ff fff3 	bl	8000dfc <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e16:	e7fe      	b.n	8000e16 <_exit+0xa>

08000e18 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e18:	4a03      	ldr	r2, [pc, #12]	; (8000e28 <SystemInit+0x10>)
 8000e1a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000e1e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e22:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e26:	4770      	bx	lr
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e30:	480d      	ldr	r0, [pc, #52]	; (8000e68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e32:	490e      	ldr	r1, [pc, #56]	; (8000e6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e34:	4a0e      	ldr	r2, [pc, #56]	; (8000e70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e38:	e002      	b.n	8000e40 <LoopCopyDataInit>

08000e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3e:	3304      	adds	r3, #4

08000e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e44:	d3f9      	bcc.n	8000e3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e46:	4a0b      	ldr	r2, [pc, #44]	; (8000e74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e48:	4c0b      	ldr	r4, [pc, #44]	; (8000e78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e4c:	e001      	b.n	8000e52 <LoopFillZerobss>

08000e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e50:	3204      	adds	r2, #4

08000e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e54:	d3fb      	bcc.n	8000e4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e56:	f7ff ffdf 	bl	8000e18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e5a:	f000 f82b 	bl	8000eb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e5e:	f7ff fbef 	bl	8000640 <main>
  bx  lr    
 8000e62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e6c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e70:	08000f48 	.word	0x08000f48
  ldr r2, =_sbss
 8000e74:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e78:	20000090 	.word	0x20000090

08000e7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <ADC_IRQHandler>
	...

08000e80 <__errno>:
 8000e80:	4b01      	ldr	r3, [pc, #4]	; (8000e88 <__errno+0x8>)
 8000e82:	6818      	ldr	r0, [r3, #0]
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	2000000c 	.word	0x2000000c

08000e8c <exit>:
 8000e8c:	b508      	push	{r3, lr}
 8000e8e:	4b07      	ldr	r3, [pc, #28]	; (8000eac <exit+0x20>)
 8000e90:	4604      	mov	r4, r0
 8000e92:	b113      	cbz	r3, 8000e9a <exit+0xe>
 8000e94:	2100      	movs	r1, #0
 8000e96:	f3af 8000 	nop.w
 8000e9a:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <exit+0x24>)
 8000e9c:	6818      	ldr	r0, [r3, #0]
 8000e9e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000ea0:	b103      	cbz	r3, 8000ea4 <exit+0x18>
 8000ea2:	4798      	blx	r3
 8000ea4:	4620      	mov	r0, r4
 8000ea6:	f7ff ffb1 	bl	8000e0c <_exit>
 8000eaa:	bf00      	nop
 8000eac:	00000000 	.word	0x00000000
 8000eb0:	08000f34 	.word	0x08000f34

08000eb4 <__libc_init_array>:
 8000eb4:	b570      	push	{r4, r5, r6, lr}
 8000eb6:	4d0d      	ldr	r5, [pc, #52]	; (8000eec <__libc_init_array+0x38>)
 8000eb8:	4c0d      	ldr	r4, [pc, #52]	; (8000ef0 <__libc_init_array+0x3c>)
 8000eba:	1b64      	subs	r4, r4, r5
 8000ebc:	10a4      	asrs	r4, r4, #2
 8000ebe:	2600      	movs	r6, #0
 8000ec0:	42a6      	cmp	r6, r4
 8000ec2:	d109      	bne.n	8000ed8 <__libc_init_array+0x24>
 8000ec4:	4d0b      	ldr	r5, [pc, #44]	; (8000ef4 <__libc_init_array+0x40>)
 8000ec6:	4c0c      	ldr	r4, [pc, #48]	; (8000ef8 <__libc_init_array+0x44>)
 8000ec8:	f000 f820 	bl	8000f0c <_init>
 8000ecc:	1b64      	subs	r4, r4, r5
 8000ece:	10a4      	asrs	r4, r4, #2
 8000ed0:	2600      	movs	r6, #0
 8000ed2:	42a6      	cmp	r6, r4
 8000ed4:	d105      	bne.n	8000ee2 <__libc_init_array+0x2e>
 8000ed6:	bd70      	pop	{r4, r5, r6, pc}
 8000ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000edc:	4798      	blx	r3
 8000ede:	3601      	adds	r6, #1
 8000ee0:	e7ee      	b.n	8000ec0 <__libc_init_array+0xc>
 8000ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ee6:	4798      	blx	r3
 8000ee8:	3601      	adds	r6, #1
 8000eea:	e7f2      	b.n	8000ed2 <__libc_init_array+0x1e>
 8000eec:	08000f40 	.word	0x08000f40
 8000ef0:	08000f40 	.word	0x08000f40
 8000ef4:	08000f40 	.word	0x08000f40
 8000ef8:	08000f44 	.word	0x08000f44

08000efc <memset>:
 8000efc:	4402      	add	r2, r0
 8000efe:	4603      	mov	r3, r0
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d100      	bne.n	8000f06 <memset+0xa>
 8000f04:	4770      	bx	lr
 8000f06:	f803 1b01 	strb.w	r1, [r3], #1
 8000f0a:	e7f9      	b.n	8000f00 <memset+0x4>

08000f0c <_init>:
 8000f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f0e:	bf00      	nop
 8000f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f12:	bc08      	pop	{r3}
 8000f14:	469e      	mov	lr, r3
 8000f16:	4770      	bx	lr

08000f18 <_fini>:
 8000f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f1a:	bf00      	nop
 8000f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f1e:	bc08      	pop	{r3}
 8000f20:	469e      	mov	lr, r3
 8000f22:	4770      	bx	lr
